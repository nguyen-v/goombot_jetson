<launch>

  <!-- Transforms --> 
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.0182 0 0.113 0 0 0 base_link laser 30" />
  <node pkg="tf" type="static_transform_publisher" name="base_link_to_imu" args="-0.0123 0 0.0571 0 0 0 base_link imu 30" />
  <node pkg="tf" type="static_transform_publisher" name="base_footprint_to_base_link" args="0 0 0.06 0 0 0 base_footprint base_link 30" />
  <!-- robot_pose_ekf: odom to base_footprint -->
  <!-- amcl: map to odom -->
  <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" />

  <!-- Setup rosserial connection to arduino -->
  <!-- Subscribes: /cmd_vel /reset_controller -->
  <!-- Publishes: /left_wheel_vel /right_wheel_vel /left_ticks /right_ticks -->
  <node pkg="rosserial_python" type="serial_node.py" name="serial_node">
    <param name="port" value="/dev/ttyACM0"/>
    <param name="baud" value="921600"/>
  </node>

  <!-- IMU (BNO055) publisher-->
  <!-- Publishes: /imu/data -->
  <node ns="imu" name="imu_node" pkg="imu_bno055" type="bno055_i2c_node" respawn="true" respawn_delay="1">
    <param name="device" type="string" value="/dev/i2c-1"/>
    <param name="address" type="int" value="40"/> <!-- BNO055 uses 0x28 as a default address-->
    <param name="frame_id" type="string" value="imu"/>
  </node>

  <!-- RPLIDAR A1 publisher -->
  <!-- Publishes: /scan -->
  <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
    <param name="serial_port"         type="string" value="/dev/ttyUSB0"/>
    <param name="serial_baudrate"     type="int"    value="115200"/>
    <param name="frame_id"            type="string" value="laser"/>
    <param name="inverted"            type="bool"   value="false"/>
    <param name="angle_compensate"    type="bool"   value="true"/>
  </node>  

<!-- Laser filters to limit RPLIDAR angle -->
<!-- <node pkg="laser_filters" type="scan_to_scan_filter_chain"
    name="laser_filter">
  <rosparam command="load" file="$(find navstack_pub)/param/laserscan_filter.yaml" />
</node> -->

<!-- Rviz initial pose and goals publisher -->
<!-- Publishes: /initialpose, /move_base_simple/goal -->
<node pkg="rviz" type="rviz" name="rviz" args="-d /home/goombot/goombot_ws/src/goombot/navstack_pub/maps/corridor.rviz">
</node>

<!-- 2D initial pose and goals publishers -->
<!-- Subscribes: /initialpose, /move_base_simple/goal -->
<!-- Publishes: /init_pose_2d, /goal_2d -->
<node pkg="wheel_odom_pub" type="rviz_to_2d_pose" name="rviz_to_2d_pose">
</node>

<!-- Wheel odometry publisher -->
<!-- Subscribes: /left_ticks /right_ticks /left_wheel_vel /right_wheel_vel /init_pose_2d -->
<!-- Publishes: /odom_euler /odom_quat -->
<node pkg="wheel_odom_pub" type="odom_pub" name="odom_pub">
</node> 

<!-- Combined EKF (IMU + wheel odometry) using robot_pose_ekf -->
<!-- Subscribes: /odom, /imu_data, /vo -->
<!-- Publishes: /robot_pose_ekf/odom_combined -->
<remap from="odom" to="odom_quat" />
<remap from="imu_data" to="imu/data" />
<node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
  <param name="output_frame" value="odom"/>
  <param name="base_footprint_frame" value="base_footprint"/>
  <param name="freq" value="20.0"/>
  <param name="sensor_timeout" value="1.0"/>
  <param name="odom_used" value="true"/>
  <param name="imu_used" value="true"/>
  <param name="vo_used" value="false"/>
  <param name="gps_used" value="false"/>
  <param name="debug" value="false"/>
  <param name="self_diagnose" value="false"/>
</node>

  <!-- Map -->
  <arg name="map_file" default="$(find navstack_pub)/maps/comble.yaml"/>
	
  <!-- Map server -->
  <!-- Publishes: /map, /map_metadata -->
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />
	
  <!-- AMCL -->
  <!-- Subscribes: /scan, /tf, /initialpose, /map -->
  <!-- Publish: /amcl_pose, /particlecloud, /tf -->
  <!-- <include file="$(find navstack_pub)/launch/amcl_diff_lidar.launch"/> -->

  <include file="$(find amcl)/examples/amcl_diff.launch"/>
	
  <!-- Move Base -->
  <!-- Subscribes: /move_base_simple/goal -->
  <!-- Publishes: /cmd_vel -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find navstack_pub)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find navstack_pub)/param/local_costmap_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find navstack_pub)/param/global_costmap_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find navstack_pub)/param/base_local_planner_params.yaml" command="load" />
  </node>


</launch>
